# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from opencv_apps/RotatedRectArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import opencv_apps.msg

class RotatedRectArray(genpy.Message):
  _md5sum = "a27e397ed2b5b1a633561d324f64d2a6"
  _type = "opencv_apps/RotatedRectArray"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """RotatedRect[] rects

================================================================================
MSG: opencv_apps/RotatedRect
float64 angle
Point2D center
Size size

================================================================================
MSG: opencv_apps/Point2D
float64 x
float64 y


================================================================================
MSG: opencv_apps/Size
float64 width
float64 height

"""
  __slots__ = ['rects']
  _slot_types = ['opencv_apps/RotatedRect[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RotatedRectArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.rects is None:
        self.rects = []
    else:
      self.rects = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.rects)
      buff.write(_struct_I.pack(length))
      for val1 in self.rects:
        _x = val1.angle
        buff.write(_get_struct_d().pack(_x))
        _v1 = val1.center
        _x = _v1
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v2 = val1.size
        _x = _v2
        buff.write(_get_struct_2d().pack(_x.width, _x.height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.rects is None:
        self.rects = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rects = []
      for i in range(0, length):
        val1 = opencv_apps.msg.RotatedRect()
        start = end
        end += 8
        (val1.angle,) = _get_struct_d().unpack(str[start:end])
        _v3 = val1.center
        _x = _v3
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v4 = val1.size
        _x = _v4
        start = end
        end += 16
        (_x.width, _x.height,) = _get_struct_2d().unpack(str[start:end])
        self.rects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.rects)
      buff.write(_struct_I.pack(length))
      for val1 in self.rects:
        _x = val1.angle
        buff.write(_get_struct_d().pack(_x))
        _v5 = val1.center
        _x = _v5
        buff.write(_get_struct_2d().pack(_x.x, _x.y))
        _v6 = val1.size
        _x = _v6
        buff.write(_get_struct_2d().pack(_x.width, _x.height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.rects is None:
        self.rects = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rects = []
      for i in range(0, length):
        val1 = opencv_apps.msg.RotatedRect()
        start = end
        end += 8
        (val1.angle,) = _get_struct_d().unpack(str[start:end])
        _v7 = val1.center
        _x = _v7
        start = end
        end += 16
        (_x.x, _x.y,) = _get_struct_2d().unpack(str[start:end])
        _v8 = val1.size
        _x = _v8
        start = end
        end += 16
        (_x.width, _x.height,) = _get_struct_2d().unpack(str[start:end])
        self.rects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
